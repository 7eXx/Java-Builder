/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap_testing;

import hashmap_testing.datastructure.VariableAddress;
import hashmap_testing.datastructure.SimpleVariableAddress;
import hashmap_testing.datastructure.VariableAddressBuilder;
import hashmap_testing.datastructure.VariableAddressPlcWildcard;
import hashmap_testing.datastructure.VariableAddressWildcard;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

class VariableAddressBuilderTest {
    
    VariableAddress addressAllPlcs;
    VariableAddress addressPlcAllVariables;
    VariableAddress address;
    
    @BeforeEach
    void setup() {
        addressAllPlcs = new VariableAddressWildcard();
        addressPlcAllVariables = new VariableAddressPlcWildcard(54);
        address = new SimpleVariableAddress(54, 1, 2002);
    }
    
    @Test 
    void testBuildSimpleVariableAddressSameHashCode() {
        VariableAddress address2 = new VariableAddressBuilder()
                .setPlcAddress(54)
                .setTableIndex(1)
                .setVariableIndex(2002)
                .build();
        
        assertEquals(address2.hashCode(), address.hashCode());
    }
    
    @Test
    void testBuildSimpleVariableAddressNotSameHashCode() {
        VariableAddress address2 = new VariableAddressBuilder()
                .setPlcAddress(54)
                .setTableIndex(1)
                .setVariableIndex(2003)
                .build();
        
        assertNotEquals(address2.hashCode(), address.hashCode());
    }
    
    @Test
    void testBuildWildcardVariableAddress() {
        VariableAddress wildcardAddress = new VariableAddressBuilder().build();
        
        assertEquals(addressAllPlcs, wildcardAddress);
    }
    
    @Test
    void testBuildPlcWildcardVariableAddress() {
        VariableAddress plcWildcardAddress = new VariableAddressBuilder()
                .setPlcAddress(54)
                .build();
        
        assertEquals(addressPlcAllVariables, plcWildcardAddress);
    }
    
    @Test
    void testIllegalBuild() {
        assertThrows(IllegalArgumentException.class, () -> {
            new VariableAddressBuilder()
                    .setTableIndex(1)
                    .setVariableIndex(2002)
                    .build();
        });
    }
}
